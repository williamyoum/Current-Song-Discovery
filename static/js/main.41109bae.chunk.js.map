{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["spotifyApi","SpotifyWebApi","App","props","params","getHashParams","console","log","token","access_token","setAccessToken","state","loggedIn","nowPlaying","name","albumArt","accessURI","audioFacts","key","timeSignature","mode","tempo","keyConversion","getAudioFacts","bind","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","feedURI","this","getAudioFeaturesForTrack","then","data","setState","song_key","song_timeSignature","time_signature","song_mode","song_tempo","song_energy","energy","printKeyEasy","printModeEasy","err","error","getMyCurrentPlaybackState","response","item","album","images","url","id","modeConversion","className","href","src","alt","onClick","getNowPlaying","class","style","height","width","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41109bae.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n    console.log(params);\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n    this.state = {\n      loggedIn: token ? true : false,\n      nowPlaying: { name: 'Now Playing...', albumArt: '', accessURI: ''},\n      audioFacts: { key: '', timeSignature: '', mode: '', tempo: ' '},\n      keyConversion: '',\n    };\n    this.getAudioFacts = this.getAudioFacts.bind(this);\n\n  }\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  }\n  getAudioFacts() {\n    // this.accessURI(); //returns songURI\n    const feedURI = this.state.nowPlaying.accessURI;\n    spotifyApi.getAudioFeaturesForTrack(feedURI)\n      .then((data) => {\n        this.setState({\n          audioFacts: {\n            song_key: data.key,\n            song_timeSignature: data.time_signature,\n            song_mode: data.mode,\n            song_tempo: data.tempo,\n            song_energy: data.energy,\n          },\n        })\n        this.printKeyEasy();\n        // this.printTimeSigEasy();\n        this.printModeEasy();\n      }, function (err) {\n        console.error(err);\n      });\n  }\n  getNowPlaying() {\n    spotifyApi.getMyCurrentPlaybackState()\n      .then((response) => {\n        this.setState({\n          nowPlaying: {\n            name: response.item.name,\n            albumArt: response.item.album.images[0].url,\n            accessURI: response.item.id,\n          },\n        });\n      })\n  }\n  printModeEasy(){\n    if (this.state.audioFacts.song_key === 0) {\n      this.setState({\n        modeConversion: 'Minor',\n      })\n    }\n    else{\n      this.setState({\n        modeConversion: 'Major',\n      })\n    }\n  }\n  printKeyEasy() {\n    if (this.state.audioFacts.song_key === 0) {\n      this.setState({\n        keyConversion: 'C',\n      })\n    }\n    if (this.state.audioFacts.song_key === 1) {\n      this.setState({\n        keyConversion: 'C#/Db',\n      })\n    }\n    if (this.state.audioFacts.song_key === 2) {\n      this.setState({\n        keyConversion: 'D',\n      })\n    }\n    if (this.state.audioFacts.song_key === 3) {\n      this.setState({\n        keyConversion: 'D#/Eb',\n      })\n    }\n    if (this.state.audioFacts.song_key === 4) {\n      this.setState({\n        keyConversion: 'E',\n      })\n    }\n    if (this.state.audioFacts.song_key === 5) {\n      this.setState({\n        keyConversion: 'F',\n      })\n    }\n    if (this.state.audioFacts.song_key === 6) {\n      this.setState({\n        keyConversion: 'F#/Gb',\n      })\n    }\n    if (this.state.audioFacts.song_key === 7) {\n      this.setState({\n        keyConversion: 'G',\n      })\n    }\n    if (this.state.audioFacts.song_key === 8) {\n      this.setState({\n        keyConversion: 'G#/Ab',\n      })\n    }\n    if (this.state.audioFacts.song_key === 9) {\n      this.setState({\n        keyConversion: 'A',\n      })\n    }\n    if (this.state.audioFacts.song_key === 10) {\n      this.setState({\n        keyConversion: 'A#/Bb',\n      })\n    }\n    if (this.state.audioFacts.song_key === 11) {\n      this.setState({\n        keyConversion: 'B',\n      })\n    }\n    console.log(\"printed easy\");\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"row\">\n          <div className=\"column\">\n            <header>\n              {/* move to header.js */}\n              DISCOVER\n              KEY,\n              TIME SIGNATURE,\n              MODE,\n              TEMPO,\n              ENERGY\n        </header>\n          </div>\n          <div className=\"column\">\n            <div>\n              <a href='http://localhost:4002/'>\n                <img id=\"logo\" src=\"https://www.freepnglogos.com/uploads/spotify-logo-png/spotify-icon-logo-transparent-vector-1.png\" alt=\"Spotify Logo\" />\n              </a>\n            </div>\n            {/* Login Button */}\n            <a href='http://localhost:4002'><button id=\"button1\">LOGIN TO SPOTIFY</button></a>\n            {/* Now Playing Button */}\n              {this.state.loggedIn && <button id=\"button2\" onClick={() => this.getNowPlaying()}>WHAT'S PLAYING?</button>}\n            {/* text input for track name */}\n            {/* Audio Features Button */}\n            {this.state.loggedIn && <button id=\"button3\" onClick={() => this.getAudioFacts()}>ANALYZE SONG</button>}\n            <div class=\"nowPlaying\">\n              <p>{this.state.nowPlaying.name}</p>\n            </div>\n            {/* {this.printKeyEasy} */}\n            <div>\n              <p class=\"answers\">KEY: {this.state.audioFacts.song_key} // {this.state.keyConversion}</p>\n              <p class=\"answers\">Time signature: {this.state.audioFacts.song_timeSignature} / 4</p>\n              <p class=\"answers\">Mode: {this.state.audioFacts.song_mode} // {this.state.modeConversion} </p>\n              <p class=\"answers\">Tempo:  {this.state.audioFacts.song_tempo} BPM</p>\n              <p class=\"answers\">Energy:  {this.state.audioFacts.song_energy} </p>\n            </div>\n            <div>\n              <img src={this.state.nowPlaying.albumArt} alt=\"\" style={{ height: 400, width: 400 }} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n\n\n// notes:\n// make sure the current song gives back the URI, feed that URI into audioFacts.\n// maybe move the answers next to the head, aligned, but in the columnR\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}